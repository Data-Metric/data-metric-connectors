# This is a workflow to test Code quality of the python pacakge

name: Package Code Quality test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Sets up python in the runner
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Installs poerty
      - name: Install poetry
        run: |
          curl -sSL \
            "https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py" | python

          # Adding `poetry` to `$PATH`:
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      # Install all the dependencies setup in poetry.toml
      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      # checks package dependencies and check for vulnerabilities in packages
      - name: package
        run: |
          poetry check
          poetry run pip check
          poetry run safety check --full-report

      # checks static typing for Python
      - name: lint
        run: |
          poetry run mypy data_metric_connector
          poetry run flake8 .

      - name: test
        run: |
          poetry run coverage run -m pytest tests
          poetry run coverage xml -o coverage1.xml
          poetry run pytest --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
          
      - name: Upload Coverage
        run: |
          bash <(curl -s https://codecov.io/bash) -X gcov -Z
          
